name: CI .NET Framework

on:
  workflow_call:
    inputs:
      enableSonar:
        type: string
        required: false
        default: 'true'
        description: 'Enable SonarQube scan. Choices: true, false'
      artifacts-type:
        type: string
        required: true
        default: 'lib'
        description: 'Type of artifacts to publish. Choices: lib, app'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore
        shell: pwsh

      - name: Build Solution
        run: msbuild /p:Configuration=Release
        shell: pwsh

      - name: Official SonarQube Scan
        if: ${{ inputs.enableSonar == 'true' }}
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true
            -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*,**/test/**/*

      - name: Run Tests
        run: |
          $testFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.Tests.dll" -Recurse | ForEach-Object { $_.FullName }
          if ($testFiles.Count -eq 0) {
            Write-Host "No test assemblies found."
          } else {
            foreach ($file in $testFiles) {
              & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $file
            }
          }
        shell: pwsh

      - name: List build outputs
        run: Get-ChildItem -Recurse -Path .\ -Filter *.dll
        shell: pwsh

      - name: Create NuGet packages
        run: |
          $nuspecFiles = Get-ChildItem -Path . -Filter *.nuspec -Recurse
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          foreach ($nuspec in $nuspecFiles) {
            Write-Host "Packing $($nuspec.FullName)..."
            nuget pack $nuspec.FullName -OutputDirectory ./artifacts
          }
        shell: pwsh

    
      - name: Upload NuGet Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: 
            ./artifacts/*.nupkg
            '**/bin/Release/*.exe'
          if-no-files-found: warn

      - name: Publish to GitHub Packages
        if: ${{ inputs.artifacts-type == 'lib' }}
        run: |
          echo "Starting to publish the package to GitHub Packages..."
          nuget sources add -Name "github" -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -Username ${{ github.actor }} -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "github" -SkipDuplicate
          echo "Package successfully published to GitHub Packages."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}