name: CI .NET Framework

on:
  workflow_call:
    inputs:
      enableSonar:
        type: string
        required: false
        default: 'true'
        description: 'Enable SonarQube scan. Choices: true, false'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet packages
        run: nuget restore
        shell: pwsh

      - name: Build Solution
        run: msbuild /p:Configuration=Release
        shell: pwsh

      - name: Official SonarQube Scan
        if: ${{ inputs.enableSonar == 'true' }}
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true
            -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*,**/test/**/*

      - name: Run Tests
        run: |
          $testFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.Tests.dll" -Recurse | ForEach-Object { $_.FullName }
          if ($testFiles.Count -eq 0) {
            Write-Host "No test assemblies found."
          } else {
            foreach ($file in $testFiles) {
              & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $file
            }
          }
        shell: pwsh

      - name: List build outputs
        run: Get-ChildItem -Recurse -Path .\ -Filter *.dll
        shell: pwsh

      - name: Create NuGet packages
        run: |
          $nuspecFiles = Get-ChildItem -Path . -Filter *.nuspec -Recurse
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          foreach ($nuspec in $nuspecFiles) {
            Write-Host "Packing $($nuspec.FullName)..."
            nuget pack $nuspec.FullName -OutputDirectory ./artifacts
          }
        shell: pwsh

    
      - name: Upload NuGet Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/*.nupkg
          if-no-files-found: warn

      # - name: Restore NuGet Packages
      #   run: |
      #     nuget restore
      #   shell: pwsh

      # - name: Build and Create NuGet Package
      #   run: |
      #     msbuild /t:Restore,Build /p:OutDir=${{ github.workspace }}/build-output
      #   shell: pwsh

      # - name: Create NuGet package
      #   run: |
      #     $nuspecFile = Get-ChildItem -Recurse -Filter *.nuspec | Select-Object -First 1
      #     if (-not $nuspecFile) {
      #         Write-Error "No .nuspec file found!"
      #         exit 1
      #     }
      #     nuget pack $nuspecFile.FullName -OutputDirectory ./artifacts/
      #   shell: pwsh
   
      # - name: Run Tests
      #   run: |
      #     nuget restore
      #     msbuild /p:Configuration=Release
      #     $testFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.Tests.dll" -Recurse | ForEach-Object { $_.FullName }
      #     foreach ($file in $testFiles) {
      #       & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $file
      #     }
      #   shell: pwsh

      # - name: List Files in All Release Directories
      #   run: |
      #     echo "Listing all files in the Release directories:"
      #     Get-ChildItem -Path **/bin/Release/ -Recurse
      #   shell: pwsh

      # - name: Debug Build Output
      #   run: |
      #     echo "Listing all files in the workspace:"
      #     dir ${{ github.workspace }}

      # - name: Save Build Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-artifacts
      #     path: '*.nuspec,*.nupkg,./*.nuspec,./*.nupkg'
      #     if-no-files-found: warn

