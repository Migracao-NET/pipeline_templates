name: CI .NET Framework

on:
  workflow_call:
    inputs:
      enableSonar:
        type: string
        required: false
        default: 'true'
        description: 'Enable SonarQube scan. Choices: true, false'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      # - name: Build solution
      #   run: |
      #     $sln = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
      #     msbuild $sln.FullName /p:Configuration=Release
      #   shell: pwsh

      - name: Build Solution
        run: msbuild /p:Configuration=Release
        shell: pwsh

      # - name: Official SonarQube Scan
      #   if: ${{ inputs.enableSonar == 'true' }}
      #   uses: SonarSource/sonarqube-scan-action@v5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.organization=${{ github.repository_owner }}
      #       -Dsonar.projectKey=${{ github.event.repository.name }}
      #       -Dsonar.verbose=true
      #       -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*,**/test/**/*

      # - name: Run Tests
      #   run: |
      #     $testFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.Tests.dll" -Recurse | ForEach-Object { $_.FullName }
      #     if ($testFiles.Count -eq 0) {
      #       Write-Host "No test assemblies found."
      #     } else {
      #       foreach ($file in $testFiles) {
      #         & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $file
      #       }
      #     }
      #   shell: pwsh

      # - name: List Test Outputs
      #   run: |
      #     $testOutputFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.dll" -Recurse | ForEach-Object { $_.FullName }
      #     if ($testOutputFiles.Count -eq 0) {
      #     Write-Host "No test output files found."
      #       } else {
      #     Write-Host "Test output files:"
      #     $testOutputFiles | ForEach-Object { Write-Host $_ }
      #     }
      #   shell: pwsh

      # - name: Create Package from .csproj
      #   run: |
      #     $csprojFiles = Get-ChildItem -Path . -Filter *.csproj -Recurse
      #     New-Item -ItemType Directory -Path artifacts -Force | Out-Null
      #     foreach ($csproj in $csprojFiles) {
      #     Write-Host "Packing $($csproj.FullName)..."
      #     dotnet pack $csproj.FullName --configuration Release --output ./artifacts
      #     }
      #   shell: pwsh


      # # - name: Create NuGet packages
      # #   run: |
      # #     $nuspecFiles = Get-ChildItem -Path . -Filter *.nuspec -Recurse
      # #     New-Item -ItemType Directory -Path artifacts -Force | Out-Null
      # #     foreach ($nuspec in $nuspecFiles) {
      # #       Write-Host "Packing $($nuspec.FullName)..."
      # #       nuget pack $nuspec.FullName -OutputDirectory ./artifacts
      # #     }
      # #   shell: pwsh

    
      # - name: Upload NuGet Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-artifacts
      #     path: 
      #       ./artifacts/*
      #       # **/bin/Release/*.exe
      #     if-no-files-found: warn

      # - name: Debug Artifact Path
      #   run: |
      #     echo "Checking the path for NuGet artifacts..."
      #     Get-ChildItem -Path ./artifacts/* -Recurse | ForEach-Object { Write-Host $_.FullName }
      #   shell: pwsh
