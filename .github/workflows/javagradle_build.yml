name: Reusable Gradle Workflow

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Allow gradlew execution
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test

  #     - name: Set Sonar Project Key
  #       if: github.ref_name == 'main'
  #       run: echo "SONAR_PROJECT_KEY=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

  #     - name: SonarCloud Scan
  #       if: github.ref_name == 'main'
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.host.url=https://sonarcloud.io
  #           -Dsonar.organization=migracao-net
  #           -Dsonar.projectKey=$SONAR_PROJECT_KEY
  #           -Dsonar.projectName=${{ github.event.repository.name }}
  #           -Dsonar.sources=src
  #           -Dsonar.tests=src/test
  #           -Dsonar.java.binaries=build/classes
  #           -Dsonar.branch.name=${{ github.ref_name }}
  #           -Dsonar.verbose=true

  #     - name: Upload artifact
  #       if: |
  #         success() && !cancelled()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build-output
  #         path: build/libs

  # deploy:
  #   needs: build
  #   if: |
  #     success() && github.ref_name == 'main'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-output
  #         path: ./build/libs

  #     - name: Deploy
  #       run: |
  #         echo "Realizando deploy..."
  #         # Adicione aqui lógica específica de deploy (ex: Docker push, SCP, etc.)
